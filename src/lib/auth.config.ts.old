import { PrismaClient } from '@prisma/client';
import type { NextAuthConfig } from 'next-auth';
import { SupabaseAdapter } from '@auth/supabase-adapter';
import Credentials from 'next-auth/providers/credentials';
import bcrypt from 'bcryptjs';

// Initialize Prisma
const prisma = new PrismaClient();

export const authConfig = {
  adapter: process.env.USE_LOCAL_AUTH
    ? undefined
    : SupabaseAdapter({
        url: process.env.NEXT_PUBLIC_SUPABASE_URL!,
        secret: process.env.SUPABASE_SERVICE_ROLE_KEY!,
      }),
  providers: [
    Credentials({
      name: 'Credentials',
      credentials: {
        email: { label: 'Email', type: 'text' },
        password: { label: 'Password', type: 'password' },
      },
      async authorize(credentials) {
        if (!process.env.USE_LOCAL_AUTH) return null;

        const user = await prisma.profile.findUnique({
          where: { email: credentials.email },
        });

        if (!user?.password) return null;

        const isValid = await bcrypt.compare(
          credentials.password,
          user.password
        );

        return isValid ? { id: user.id, email: user.email } : null;
      },
    }),
    // Add other providers (Google, GitHub) as needed
  ],
  session: { strategy: "jwt" },
  callbacks: {
    async jwt({ token, user }) {
      if (user) token.id = user.id;
      return token;
    },
    async session({ session, token }) {
      session.user.id = token.id as string;
      return session;
    },
  },
} satisfies NextAuthConfig;
