// schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"]
}

///////////////////////
// Public Schema
///////////////////////

enum UserRole {
  submitter
  evaluator
  management
  ADMIN
  USER

  @@schema("public")
}

enum IdeaStatus {
  draft
  submitted
  under_review
  approved
  rejected
  implemented

  @@schema("public")
}

enum IdeaCategory {
  innovation
  process_improvement
  cost_reduction
  customer_experience
  technology
  sustainability

  @@schema("public")
}

enum AttachmentFileType {
  feasibility
  pricing_offer
  prototype

  @@schema("public")
}

model Profile {
  id                   String     @id @db.Uuid
  email                String     @unique
  full_name            String?
  role                 UserRole   @default(submitter)
  department           String?
  email_confirmed      Boolean?   @default(true)
  created_at           DateTime   @default(now()) @db.Timestamptz
  updated_at           DateTime   @default(now()) @updatedAt @db.Timestamptz

  // Relations
  user                 User             @relation(fields: [id], references: [id], onDelete: Cascade)
  submitted_ideas      Idea[]           @relation("submitter_ideas")
  evaluated_ideas      Idea[]           @relation("evaluator_ideas")
  uploaded_attachments IdeaAttachment[] @relation("UploadedAttachments")
  evaluations          Evaluation[]
  comments             IdeaComment[]

  @@schema("public")
}

model Translation {
  id             String   @id @default(uuid()) @db.Uuid
  interface_name String
  position_key   String
  english_text   String
  arabic_text    String
  created_at     DateTime @default(now()) @db.Timestamptz
  updated_at     DateTime @default(now()) @db.Timestamptz

  @@unique([interface_name, position_key])
  @@map("translations")

  @@schema("public")
}

model Idea {
  id                        String      @id @default(uuid()) @db.Uuid
  title                     String
  description               String
  category                  IdeaCategory
  status                    IdeaStatus  @default(draft)
  priority_score            Int         @default(0)
  implementation_cost       Decimal?    @db.Decimal(10, 2)
  expected_roi              Decimal?    @db.Decimal(10, 2)
  strategic_alignment_score Int?       @default(1)
  // Note: SQL CHECK constraint (>= 1 AND <= 10) is enforced by the database.
  created_at                DateTime    @default(now()) @db.Timestamptz
  updated_at                DateTime    @default(now()) @updatedAt @db.Timestamptz
  submitted_at              DateTime?   @db.Timestamptz
  evaluated_at              DateTime?   @db.Timestamptz
  implemented_at            DateTime?   @db.Timestamptz

  // New fields from SQL schema
  idea_reference_code       String?    @unique @db.VarChar
  average_evaluation_score  Decimal?   @db.Decimal
  feasibility_study_url     String?
  pricing_offer_url         String?
  prototype_images_urls     String[]
  current_stage             String?    @default("draft")
  language                  String?    @default("ar") @db.VarChar

  // Relations (unchanged)
  submitter_id              String      @db.Uuid
  submitter                 Profile     @relation("submitter_ideas", fields: [submitter_id], references: [id])
  assigned_evaluator_id     String?     @db.Uuid
  assigned_evaluator        Profile?    @relation("evaluator_ideas", fields: [assigned_evaluator_id], references: [id])
  evaluations               Evaluation[]
  comments                  IdeaComment[]
  attachments               IdeaAttachment[]

  @@schema("public")
}

model IdeaComment {
  id          String    @id @default(uuid()) @db.Uuid
  comment     String
  created_at  DateTime  @default(now()) @db.Timestamptz

  // Relations
  idea_id    String    @db.Uuid
  idea       Idea      @relation(fields: [idea_id], references: [id])

  user_id    String    @db.Uuid
  user       Profile   @relation(fields: [user_id], references: [id])

  @@schema("public")
}

// New model from idea_attachments table
model IdeaAttachment {
  id          String             @id @default(uuid()) @db.Uuid
  idea_id     String             @db.Uuid
  file_type   AttachmentFileType
  file_name   String?
  file_url    String?
  uploaded_by String             @db.Uuid
  created_at  DateTime           @default(now()) @db.Timestamptz

  // Relations
  idea        Idea    @relation(fields: [idea_id], references: [id])
  uploader    Profile @relation("UploadedAttachments", fields: [uploaded_by], references: [id])

  @@map("idea_attachments")
  @@schema("public")
}

// New model from list_of_values table
model ListOfValue {
  id         Int      @id @default(autoincrement())
  list_key   String
  value_key  String
  value_en   String
  value_ar   String
  is_active  Boolean? @default(true)
  created_at DateTime @default(now()) @db.Timestamptz

  @@map("list_of_values")
  @@schema("public")
}

model Evaluation {
  id                 String    @id @default(uuid()) @db.Uuid
  feasibility_score  Int?
  // SQL CHECK constraint: >= 1 AND <= 10
  impact_score       Int?
  // SQL CHECK constraint: >= 1 AND <= 10
  innovation_score   Int?
  // SQL CHECK constraint: >= 1 AND <= 10
  overall_score      Int?
  // SQL CHECK constraint: >= 1 AND <= 10
  feedback           String?
  recommendation     String?
  created_at         DateTime  @default(now()) @db.Timestamptz
  updated_at         DateTime  @default(now()) @updatedAt @db.Timestamptz

  // Relations
  idea_id            String     @db.Uuid
  idea               Idea       @relation(fields: [idea_id], references: [id])
  evaluator_id       String     @db.Uuid
  evaluator          Profile    @relation(fields: [evaluator_id], references: [id])

  @@schema("public")
}

///////////////////////
// Auth Schema
///////////////////////

enum CodeChallengeMethod {
  s256
  plain

  @@schema("auth")
}

enum FactorType {
  totp
  phone_sms
  webauthn

  @@schema("auth")
}

enum FactorStatus {
  unverified
  verified

  @@schema("auth")
}

enum TokenType {
  email_verification
  password_reset
  confirmation_token

  @@schema("auth")
}

enum AuthenticationLevel {
  aal1
  aal2
  aal3

  @@schema("auth")
}

model AuditLogEntry {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?
  created_at  DateTime? @db.Timestamptz
  ip_address  String    @default("")

  @@map("audit_log_entries")
  @@schema("auth")
}

model FlowState {
  id                      String              @id @db.Uuid
  user_id                 String?             @db.Uuid
  auth_code               String
  code_challenge_method   CodeChallengeMethod
  code_challenge          String
  provider_type           String
  provider_access_token   String?
  provider_refresh_token  String?
  created_at              DateTime?           @db.Timestamptz
  updated_at              DateTime?           @db.Timestamptz
  authentication_method   String
  auth_code_issued_at     DateTime?           @db.Timestamptz

  saml_relay_states   SamlRelayState[]

  @@map("flow_state")
  @@schema("auth")
}

model Identity {
  user_id        String    @db.Uuid
  identity_data  Json      @db.JsonB
  provider       String
  last_sign_in_at DateTime? @db.Timestamptz
  created_at     DateTime? @db.Timestamptz
  updated_at     DateTime? @db.Timestamptz
  provider_id    String
  email          String?
  id             String    @id @default(uuid()) @db.Uuid

  user User @relation(fields: [user_id], references: [id])

  @@map("identities")
  @@schema("auth")
}

model Instance {
  id             String    @id @db.Uuid
  uuid           String?   @db.Uuid
  raw_base_config String?
  created_at     DateTime? @db.Timestamptz
  updated_at     DateTime? @db.Timestamptz

  @@map("instances")
  @@schema("auth")
}

model MfaAmrClaim {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz
  updated_at            DateTime @db.Timestamptz
  authentication_method String
  id                    String   @id @db.Uuid

  session Session @relation(fields: [session_id], references: [id])

  @@map("mfa_amr_claims")
  @@schema("auth")
}

model MfaChallenge {
  id                      String    @id @db.Uuid
  factor_id               String    @db.Uuid
  created_at              DateTime  @db.Timestamptz
  verified_at             DateTime? @db.Timestamptz
  ip_address              String    @db.Inet
  otp_code                String?
  web_authn_session_data  Json?     @db.JsonB

  factor MfaFactor @relation(fields: [factor_id], references: [id])

  @@map("mfa_challenges")
  @@schema("auth")
}

model MfaFactor {
  id                String    @id @db.Uuid
  user_id           String    @db.Uuid
  friendly_name     String?
  factor_type       FactorType
  status            FactorStatus
  created_at        DateTime  @db.Timestamptz
  updated_at        DateTime  @db.Timestamptz
  secret            String?
  phone             String?
  last_challenged_at DateTime? @db.Timestamptz @unique
  web_authn_credential Json?   @db.JsonB
  web_authn_aaguid   String?   @db.Uuid

  user       User           @relation(fields: [user_id], references: [id])
  challenges MfaChallenge[]

  @@map("mfa_factors")
  @@schema("auth")
}

model OneTimeToken {
  id          String    @id @db.Uuid
  user_id     String    @db.Uuid
  token_type  TokenType
  token_hash  String
  relates_to  String
  created_at  DateTime  @default(now()) @db.Timestamp(0)
  updated_at  DateTime  @default(now()) @db.Timestamp(0)

  user User @relation(fields: [user_id], references: [id])

  @@map("one_time_tokens")
  @@schema("auth")
}

model RefreshToken {
  instance_id  String?   @db.Uuid
  token        String?   @unique @db.VarChar()
  user_id      String?   @db.VarChar()
  revoked      Boolean?
  created_at   DateTime? @db.Timestamptz
  updated_at   DateTime? @db.Timestamptz
  id           BigInt    @id @default(autoincrement())
  parent       String?   @db.VarChar()
  session_id   String?   @db.Uuid

  session Session? @relation(fields: [session_id], references: [id])

  @@map("refresh_tokens")
  @@schema("auth")
}

model SamlProvider {
  id              String    @id @db.Uuid
  sso_provider_id String    @db.Uuid
  entity_id       String    @unique
  metadata_xml    String
  metadata_url    String?
  attribute_mapping Json?   @db.JsonB
  created_at      DateTime? @db.Timestamptz
  updated_at      DateTime? @db.Timestamptz
  name_id_format  String?

  sso_provider SsoProvider @relation(fields: [sso_provider_id], references: [id])

  @@map("saml_providers")
  @@schema("auth")
}

model SamlRelayState {
  id              String    @id @db.Uuid
  sso_provider_id String    @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  created_at      DateTime? @db.Timestamptz
  updated_at      DateTime? @db.Timestamptz
  flow_state_id   String?   @db.Uuid

  sso_provider SsoProvider @relation(fields: [sso_provider_id], references: [id])
  flow_state   FlowState?   @relation(fields: [flow_state_id], references: [id])

  @@map("saml_relay_states")
  @@schema("auth")
}

model SchemaMigration {
  version String @id @db.VarChar()

  @@map("schema_migrations")
  @@schema("auth")
}

model Session {
  id          String    @id @db.Uuid
  user_id     String    @db.Uuid
  created_at  DateTime? @db.Timestamptz
  updated_at  DateTime? @db.Timestamptz
  factor_id   String?   @db.Uuid
  aal         AuthenticationLevel?
  not_after   DateTime? @db.Timestamptz
  refreshed_at DateTime? @db.Timestamp(0)
  user_agent  String?
  ip          String?   @db.Inet
  tag         String?

  user          User            @relation(fields: [user_id], references: [id])
  mfa_amr_claims  MfaAmrClaim[]
  refresh_tokens  RefreshToken[]

  @@map("sessions")
  @@schema("auth")
}

model SsoDomain {
  id              String    @id @db.Uuid
  sso_provider_id String    @db.Uuid
  domain          String
  created_at      DateTime? @db.Timestamptz
  updated_at      DateTime? @db.Timestamptz

  sso_provider SsoProvider @relation(fields: [sso_provider_id], references: [id])

  @@map("sso_domains")
  @@schema("auth")
}

model SsoProvider {
  id          String    @id @db.Uuid
  resource_id String?
  created_at  DateTime? @db.Timestamptz
  updated_at  DateTime? @db.Timestamptz

  saml_providers  SamlProvider[]
  saml_relay_states SamlRelayState[]
  sso_domains   SsoDomain[]

  @@map("sso_providers")
  @@schema("auth")
}

model User {
  instance_id                 String?   @db.Uuid
  id                          String    @id @db.Uuid
  aud                         String?   @db.VarChar()
  role                        String?   @db.VarChar()
  email                       String?   @unique @db.VarChar()
  encrypted_password          String?   @db.VarChar()
  invited_at                  DateTime? @db.Timestamptz
  confirmation_token          String?   @db.VarChar()
  confirmation_sent_at        DateTime? @db.Timestamptz
  recovery_token              String?   @db.VarChar()
  recovery_sent_at            DateTime? @db.Timestamptz
  email_change                String?   @db.VarChar()
  email_change_sent_at        DateTime? @db.Timestamptz
  last_sign_in_at             DateTime? @db.Timestamptz
  raw_app_meta_data           Json?     @db.JsonB
  raw_user_meta_data          Json?     @db.JsonB
  is_super_admin              Boolean?
  created_at                  DateTime? @db.Timestamptz
  updated_at                  DateTime? @db.Timestamptz
  email_change_token_new      String?   @db.VarChar()
  phone_confirmed_at          DateTime? @db.Timestamptz
  phone_change_sent_at        DateTime? @db.Timestamptz
  email_confirmed_at          DateTime? @db.Timestamptz
  confirmed_at                DateTime? @db.Timestamptz
  phone_change_token          String    @default("") @db.VarChar()
  phone                       String?   @unique @db.VarChar()
  phone_change                String    @default("") @db.VarChar()
  email_change_token_current  String    @default("") @db.VarChar()
  email_change_confirm_status Int?      @default(0)
  banned_until                DateTime? @db.Timestamptz
  reauthentication_token      String    @default("") @db.VarChar()
  reauthentication_sent_at    DateTime? @db.Timestamptz
  is_sso_user                 Boolean   @default(false)
  deleted_at                  DateTime? @db.Timestamptz
  is_anonymous                Boolean   @default(false)
  profile                     Profile?
  identities                  Identity[]
  mfa_factors                 MfaFactor[]
  one_time_tokens             OneTimeToken[]
  sessions                    Session[]

  @@map("users")
  @@schema("auth")
}
